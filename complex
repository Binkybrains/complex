# Program: Uses a class named Complex to create and work with complex numbers
# Purpose: For a user to create complex numbers and excute funtions related to complex numbers
# Author: Nelly Duke nd659

class Complex:
    def __init__(self, r=0, i=0):
        self.__r = r
        self.__i = i

    def getReal(self):
        return self.__r

    def getImaginary(self):
        return self.__i

    def setReal(self, r):
        self.__r = r

    def setImaginary(self, i):
        self.__i = i

    def __str__(self):
        if self.__i >= 0:
            return "({} + {}i)".format(self.__r, self.__i)
        else:
            return "({} {}i)".format(self.__r, self.__i)

    def __add__(self, other):
        nr = self.__r + other.getReal()
        ni = self.__i + other.getImaginary()
        return Complex(nr, ni)

    def __sub__(self, other):
        nr = self.__r - other.getReal()
        ni = self.__i - other.getImaginary()
        return Complex(nr, ni)

    def __eq__(self, other):
        if (self.__r == other.getReal()) and (self.__i == other.getImaginary()):
            return True
        else:
            return False

    def __ne__(self, other):
        if not (self == other):
            return True
        else:
            return False

    def __getitem__(self, key):
        if key == 0:
            return self.__r
        elif key == 1:
            return self.__i
        else:
            raise IndexError('Index out of range')


def validateInteger(i):
    while True:
        try:
            i = int(i)
            return i
        except ValueError:
            i = input("Error: an integer is expected. Try again: ")


def search(numberList, searchValue):
    ind = 0
    for com in numberList:
        if com == searchValue:
            return ind
        ind += 1
    return -1


if __name__ == "__main__":
    numberList = []
    print("Working with Complex numbers\n")
    current = ""
    selection = """1. Add a complex number to the collection
    2. Print collection
    3. Add all complex numbers in the collection
    4. Search for a complex number
    5. Exit"""
    while current != "5":
        while True:
            print(selection)
            current = input("Enter your choice: \n")
            if current not in ['1', '2', '3', '4', '5']:
                print("Invalid choice. Try again.\n")
                continue
            break
        if current == "1":
            r = validateInteger(input("Enter the real part: "))
            i = validateInteger(input("Enter the imaginary part: "))
            comp = Complex(r, i)
            numberList.append(comp)
        elif current == "2":
            for num in numberList:
                print(num)
                print("\n")
        elif current == "3":
            result = Complex()
            for num in numberList:
                result += num
            print("The result is: {}\n".format(str(result)))
        elif current == "4":
            print("Enter complex number to search for")
            r = validateInteger(input("Enter the real part: "))
            i = validateInteger(input("Enter the imaginary part: "))
            comp = Complex(r, i)
            found = search(numberList, comp)
            if found == -1:
                print("{} was not found in the collection\n".format(str(comp)))
            else:
                print("{} was found at index {}\n".format(str(comp), found))
    print("Good-bye!") 

